<<<<<<< 444b904ac4257762e8ad09b9066b533320e635f9
newinfo <- paste0(base,user,params)
repositories.repos <- fromJSON(newinfo)
repositories <-fromJSON(newest.info)
newest.info <-paste0(base,user,access,params)
repositories <-fromJSON(newest.info)
newest.info <-paste0(base,user,params,access)
repositories <-fromJSON(newest.info)
github.user.data <-fromJSON(info)
repositories <- fromJSON('https://api.github.com/users/mbostock/repos')
View(repositories)
repositories <-fromJSON(newest.info)
repos <-flatten(repositories)
repos <-flatten('repositories')
repos <-flatten(repositories)
repositories <-fromJSON(newest.info)
repos <-flatten(https://api.github.com/users/mbostock/repos)
repos <-flatten('https://api.github.com/users/mbostock/repos')
repos <-flatten(repositories)
descending <- "sort=id"
descending.respositories <-paste0(base,user,descending,access)
drespositories <-paste0(base,user,descending,access)
descending.rep <- fromJSON(drespositories)
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("plotly", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("rmarkdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("plotly")
library(plotly)
df <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv")
df$hover <- with(df, paste(state, '<br>', "Beef", beef, "Dairy", dairy, "<br>",
"Fruits", total.fruits, "Veggies", total.veggies,
"<br>", "Wheat", wheat, "Corn", corn))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~total.exports, text = ~hover, locations = ~code,
color = ~total.exports, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
install.packages("plotly")
library(plotly)
df <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv")
df$hover <- with(df, paste(state, '<br>', "Beef", beef, "Dairy", dairy, "<br>",
"Fruits", total.fruits, "Veggies", total.veggies,
"<br>", "Wheat", wheat, "Corn", corn))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~total.exports, text = ~hover, locations = ~code,
color = ~total.exports, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
library(plotly)
df <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv")
df$hover <- with(df, paste(state, '<br>', "Beef", beef, "Dairy", dairy, "<br>",
"Fruits", total.fruits, "Veggies", total.veggies,
"<br>", "Wheat", wheat, "Corn", corn))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~total.exports, text = ~hover, locations = ~code,
color = ~total.exports, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
df <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv")
df$hover <- with(df, paste(state, '<br>', "Beef", beef, "Dairy", dairy, "<br>",
"Fruits", total.fruits, "Veggies", total.veggies,
"<br>", "Wheat", wheat, "Corn", corn))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~total.exports, text = ~hover, locations = ~code,
color = ~total.exports, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
install(ploty)
library("plotly", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
plot_ly(students)
test.plotly <- plot_ly(USArrests)
plotly.test <- plot_ly(midwest, x=~percollege, color = ~state, type = "box")
plotly.test <- plot_ly(midwest, x=~percollege, color = ~state, type = "box")
plotly.test
x <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
y <- c(2, 4, 6, 8, 10, 1, 3, 5, 7, 9)
df <- data.frame(x, y)
View(df)
scatterplot <- plot(x,y)
scatterplot <- plot(df)
scatterplot
df <- data.frame(x, y)
scatterplots <- plot(df)
scatterplots
scatterplots <- plot(x,y)
scatterplots <- plot(x,y)
scatterplots
scatterplots <- plot(df)
scatterplots <- plot_ly(data = df, x=x,y=y)
scatterplots
styled.scatterplot <- plot_ly(data = df, x=x, y=y, size=10, color color = red)
styled.scatterplot <- plot_ly(data = df, x=x, y=y, size=10, color = red)
styled.scatterplot <- plot_ly(data = df, x=x, y=y, size=10, color = "red")
styled.scatterplot
styled.scatterplot <- plot_ly(data = df, x=x, y=y, size=10, color = "red", width = 2)
styled.scatterplot
styled.scatterplot <- plot_ly(data = df, x=x, y=y, size=10, color = "red")
styled.scatterplot <- plot_ly(data = df, x=x, y=y, size=10, color = "red")
styled.scatterplot
styled.scatterplot <- plot_ly(data = df, x=x, y=y, size=10, color = "red", width = 2)
styled.scatterplot
styled.scatterplot <- plot_ly(data = df, x=x, y=y,
marker = (size=10, color = "red", width = 2)
)
styled.scatterplot <- plot_ly(data = df, x=x, y=y,
marker = (size=10, color = "red", width = 2))
styled.scatterplot <- plot_ly(data = df, x=x, y=y, size=10, color = "red", width = 2)
styled.scatterplot
styled.scatterplot <- plot_ly(data = df, x=x, y=y, size=10, color = "red")
styled.scatterplot
styled.scatterplot <- plot_ly(data = df, x=x, y=y, size=10, color = "red", width = 2)
styled.scatterplot
styled.scatterplot <- plot_ly(data = df, x=x, y=y, marker=c(size=10, color = "red"))
styled.scatterplot
styled.scatterplot <- plot_ly(data = df, x=x, y=y, marker=(size=10, color = "red"))
styled.scatterplot <- plot_ly(data = df, x=x, y=y, size=10, color = "red")
styled.scatterplot
setwd('~/Documents/info-201/m14-shiny/exercise-1/')
setwd
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_us_cities.csv')
df
View(df)
buildMap(df)
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
buildMap(df)
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("plotly", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
buildMap(df)
BuildMap(df)
source('./scripts/buildMap.R')
git clone https://github.com/rstudio/shiny.git
install.packages("shiny")
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
BuildMap(df)
buildMap(df)
---
library(dplyr)
library(plotly)
library(knitr)
shiny::runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
shinyUI(navbarPage('Species',
# Create a tab panel for your map
tabPanel('Setosa',
titlePanel('Variable vs. Sepal Width'),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
selectInput('Setosa', label = 'Variable', choices = list("Sepal Length" = 'sepal.length', 'Petal Length' = 'petal.length', 'Petal Width' = 'petal.width'))
),
# Main panel: display plotly map
mainPanel(
plotlyOutput('map')
)
)
),
# Create a tabPanel to show your scatter plot
tabPanel('Versicolor',
# Add a titlePanel to your tab
titlePanel('Variable'),
# Create a sidebar layout for this tab (page)
sidebarLayout(
# Create a sidebarPanel for your controls
sidebarPanel(
# Input to select variable to map
selectInput('versicolor', label = 'Variable', choices = list("Sepal Length" = 'sepal.length', 'Petal Length' = 'petal.length', 'Petal Width' = 'petal.width'))
),
# Create a main panel, in which you should display your plotly Scatter plot
mainPanel(
plotlyOutput('scatter')
)
)
)
))
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
virginica <- filter(iris, Species %in% c("virginica"))
View(virginica)
Virginica.Plotly <- plot_ly(data = virginica, x = ~Sepal.Length, y = ~Sepal.Width)
Virginica.Plotly
runApp('a8-building-apps-ataing')
Iris <- data("iris")
setosa <- filter(iris, Species %in% c("setosa"))
versicolor <- filter(iris, Species %in% c("versicolor"))
virginica <- filter(iris, Species %in% c("virginica"))
Setosa.Plotly <- plot_ly(data = setosa, x =~Sepal.Length, y = ~Sepal.Width)
Versicolor.Plotly <- plot_ly(data = versicolor, x =~Sepal.Length, y = ~Sepal.Width)
Virginica.Plotly <- plot_ly(data = virginica, x = ~Sepal.Length, y = ~Sepal.Width)
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
Setosa.Plotly <- plot_ly(data = setosa, x =~Sepal.Length, y = ~Sepal.Width)
output$setosa <- renderPlotly({
return(Setosa.Plotly(setosa, input$Setosa))
runApp('a8-building-apps-ataing')
shiny::runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
Setosa.Plotly <- plot_ly(data = setosa, x =~Sepal.Length, y = ~Sepal.Width)
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('Downloads')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
Virginica.Plotly <- plot_ly(data = virginica, x = ~input$virginica, y = ~Sepal.Width)
Virginica.Plotly
Virginica.Plotly <- plot_ly(data = virginica, x = ~input$virginica, y = ~Sepal.Width)
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('Downloads')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
runApp('a8-building-apps-ataing')
shiny::runApp('a8-building-apps-ataing')
runApp('Downloads')
runApp('a8-building-apps-ataing')
setosa <- select(iris, Sepal.length)
iris<- select(iris, Sepal.length)
iris
iris<- select(iris, Sepal.length)
iris<- select(iris, "Sepal.length")
iris<- select(iris, "Sepal.Length")
iris<- select(iris, Sepal.Length)
View(iris)
iris<- select(iris, Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
iris<- select(iris, Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
iris<- select(iris, Sepal.Length, Sepal.Width)
irisdf<- select(iris, Sepal.Length, Sepal.Width)
iris
iris
library(dyplr)
shiny::runApp('a8-building-apps-ataing')
runApp('~/Downloads')
# From http://shiny.rstudio.com/articles/basics.html
library(shiny)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Iris"),
# Sidebar with a slider input for the number of bins
sidebarLayout(
sidebarPanel(
selectInput("select", label = h3("Select box"),
choices = list("Sepal Length" = "Sepal.Length", "Sepal Width" = "Sepal.Width", "Petal Length" = "Petal.Length", "Petal Width" = "Petal.Width"))
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
runApp('a8-building-apps-ataing')
runApp('~/Downloads')
runApp()
load("~/Final Project INFO 201/.RData")
View(PoliceKilling)
View(PolicePractice)
PoliceData <- read.csv("PoliceKilling.csv")
install.packages("zipcode")
data("zipcode")
practicedata <- clean.zipcodes(PoliceData$Location.of.death..zip.code.)
somedata = merge(PoliceData, zipcode, by.x =L, by.y='zip')
PoliceData <- read.csv("PoliceKilling.csv") %>%
select(Location.of.death..zip.code.) %>%
data("zipcode")
PoliceData$zip =clean.zipcodes(PoliceData$Location.of.death..zip.code.)
PoliceData = merge(PoliceData, zipcode, by.x = 'zip', by.y = 'zip')
PolicePractice <- read.csv("PoliceKilling.csv")
data("zipcode")
PolicePractice$zip =clean.zipcodes(PolicePractice$Location.of.death..zip.code.)
PolicePractice = merge(PolicePractice, zipcode, by.x = 'zip', by.y = 'zip')
PolicePractice
Police.Killings = merge(PolicePractice, zipcode, by.x = 'zip', by.y = 'zip')
View(Police.Killings)
View(Police.Killings)
View(Police.Killings)
Police.Killings = merge(PolicePractice, zipcode, by.x = 'zip', by.y = 'zip')
View(Police.Killings)
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
Police <- select(Police.Killings, zip)
View(Police)
Police <- select(Police.Killings, zip, Victim.s.age)
View(Police)
Police <- select(Police.Killings, zip, Victim.s.age, Victim.s.gender, Victim.s.race)
View(Police)
Police <- select(Police.Killings, zip, Victim.s.age, Victim.s.gender, Victim.s.race,
Date.of.injury.resulting.in.death.month.day.year)
Police <- select(Police.Killings, zip, Victim.s.age, Victim.s.gender, Victim.s.race,
Date.of.injury.resulting.in.death..month.day.year)
Police <- select(Police.Killings, zip, Victim.s.age, Victim.s.gender, Victim.s.race,
Location.of.death.city)
Police <- select(Police.Killings, zip, Victim.s.age, Victim.s.gender, Victim.s.race,
Location.of.death.state)
Police <- select(Police.Killings, zip, Victim.s.age, Victim.s.gender, Victim.s.race,
Location.of.death.county)
Police <- select(Police.Killings, zip, Victim.s.age, Victim.s.gender, Victim.s.race,
Cause.of.death)
Police <- select(Police.Killings, zip, Victim.s.age, Victim.s.gender, Victim.s.race,
Cause.of.death, Unarmed, city, state, latitude, longitude)
View(Police)
Police <- select(Police.Killings, Victim.s.age, Victim.s.gender, Victim.s.race,
Cause.of.death, Unarmed, city, state, zip, latitude, longitude)
View(Police)
Police <- select(Police.Killings, Date.of.injury.resulting.in.death..month.day.year., Victim.s.age, Victim.s.gender, Victim.s.race,
Cause.of.death, Unarmed, city, state, zip, latitude, longitude)
View(Police)
View(Police)
install.packages("zipcode")
PolicePractice <- read.csv("PoliceKilling.csv")
data("zipcode")
PolicePractice$zip =clean.zipcodes(PolicePractice$Location.of.death..zip.code.)
Police.Killings = merge(PolicePractice, zipcode, by.x = 'zip', by.y = 'zip')
Police <- select(Police.Killings, Date.of.injury.resulting.in.death..month.day.year., Victim.s.age, Victim.s.gender, Victim.s.race,
Cause.of.death, Unarmed, city, state, zip, latitude, longitude)
View(Police)
Police.Killings = merge(PolicePractice, zipcode, by.x = 'zip', by.y = 'zip') %>%
select(Police.Killings, Date.of.injury.resulting.in.death..month.day.year., Victim.s.age, Victim.s.gender, Victim.s.race,
Cause.of.death, Unarmed, city, state, zip, latitude, longitude)
Police.Killings = merge(PolicePractice, zipcode, by.x = 'zip', by.y = 'zip') %>%
select(Police.Killings, Date.of.injury.resulting.in.death..month.day.year., Victim.s.age, Victim.s.gender, Victim.s.race,
Cause.of.death, Unarmed, city, state, zip, latitude, longitude)
Police.Killings = merge(PolicePractice, zipcode, by.x = 'zip', by.y = 'zip')
Police <- select(Police.Killings, Date.of.injury.resulting.in.death..month.day.year., Victim.s.age, Victim.s.gender, Victim.s.race,
Cause.of.death, Unarmed, city, state, zip, latitude, longitude)
Police.Killings = merge(PolicePractice, zipcode, by.x = 'zip', by.y = 'zip') %>%
select(Police.Killings, Date.of.injury.resulting.in.death..month.day.year., Victim.s.age, Victim.s.gender, Victim.s.race,
Cause.of.death, Unarmed, city, state, zip, latitude, longitude)
Police <- select(Police.Killings, Date.of.injury.resulting.in.death..month.day.year., Victim.s.age, Victim.s.gender, Victim.s.race,
Cause.of.death, Unarmed, city, state, zip, latitude, longitude)
shiny::runApp('a8-building-apps-ataing')
Police
library(dplyr)
MCity <- filter(Police, city %in% c('New York', 'Los Angeles', 'Las Vegas', 'Chicago',
'Dallas', 'Boston', 'Miami', 'Portland', 'Seattle', 'Philadelphia'))
View(MCity)
setwd("~/final_project")
install.packages("zipcode")
PolicePractice <- read.csv("PoliceKilling.csv")
data("zipcode")
PolicePractice$zip = clean.zipcodes(PolicePractice$Location.of.death..zip.code.)
Police.Killings = merge(PolicePractice, zipcode, by.x = 'zip', by.y = 'zip')
Police <- select(Police.Killings, Date.of.injury.resulting.in.death..month.day.year., Victim.s.age, Victim.s.gender, Victim.s.race,
Cause.of.death, Unarmed, city, state, zip, latitude, longitude)
install.packages("zipcode")
PolicePractice <- read.csv("PoliceKilling.csv")
data("zipcode")
PolicePractice$zip = clean.zipcodes(PolicePractice$Location.of.death..zip.code.)
Police.Killings = merge(PolicePractice, zipcode, by.x = 'zip', by.y = 'zip')
Police <- select(Police.Killings, Date.of.injury.resulting.in.death..month.day.year., Victim.s.age, Victim.s.gender, Victim.s.race,
Cause.of.death, Unarmed, city, state, zip, latitude, longitude)
install.packages("zipcode")
PolicePractice <- read.csv("PoliceKilling.csv")
data("zipcode")
PolicePractice$zip = clean.zipcodes(PolicePractice$Location.of.death..zip.code.)
Police.Killings <- merge(PolicePractice, zipcode, by.x = 'zip', by.y = 'zip')
Police <- select(Police.Killings, Date.of.injury.resulting.in.death..month.day.year., Victim.s.age, Victim.s.gender, Victim.s.race,
Cause.of.death, Unarmed, city, state, zip, latitude, longitude)
Police
PolicePractice <- read.csv("PoliceKilling.csv")
setwd("~/final_project")
PolicePractice <- read.csv("PoliceKilling.csv")
setwd("~/final_project/data")
PolicePractice <- read.csv("PoliceKilling.csv")
install.packages("zipcode")
PolicePractice <- read.csv("PoliceKilling.csv")
data("zipcode")
PolicePractice$zip = clean.zipcodes(PolicePractice$Location.of.death..zip.code.)
Police.Killings <- merge(PolicePractice, zipcode, by.x = 'zip', by.y = 'zip')
Police <- select(Police.Killings, Date.of.injury.resulting.in.death..month.day.year., Victim.s.age, Victim.s.gender, Victim.s.race,
Cause.of.death, Unarmed, city, state, zip, latitude, longitude)
PolicePractice$zip = clean.zipcodes(PolicePractice$Location.of.death..zip.code.)
data("zipcode")
library(zipcode)
PolicePractice$zip = clean.zipcodes(PolicePractice$Location.of.death..zip.code.)
Police.Killings <- merge(PolicePractice, zipcode, by.x = 'zip', by.y = 'zip')
Police <- select(Police.Killings, Date.of.injury.resulting.in.death..month.day.year., Victim.s.age, Victim.s.gender, Victim.s.race,
Cause.of.death, Unarmed, city, state, zip, latitude, longitude)
View(Police)
PolicePractice$zip = clean.zipcodes(PolicePractice$Location.of.death..zip.code.)
Police.Killings <- merge(PolicePractice, zipcode, by.x = 'zip', by.y = 'zip')
View(Police.Killings)
Police <- select(Police.Killings, Date.of.injury.resulting.in.death..month.day.year., Victim.s.age, Victim.s.gender, Victim.s.race,
Cause.of.death, Unarmed, city, state, zip, latitude, longitude)
PolicePractice <- read.csv("Police_Killings.csv")
write.csv("Police")
write.csv(Police)
setwd("~/final_project")
setwd("~/final_project/data")
write.csv(Police, ~/final_project/data)
write.csv(Police, ~final_project/data)
write.csv(Police, final_project/data)
getwd()
setwd("~/final_project")
write.csv(Police, final_project/data)
write.csv(Police, "Police_Killing")
write.csv(Police, "Police_Killing")
setwd("~/final_project/data")
write.csv(Police, "Police_Killing")
write.csv(Police, "Police_Killing.csv")
write.csv(Police, "Police_Data.csv")
library(readr)
dataset <- read_csv(NULL)
View(dataset)
View(PoliceData)
View(Police_Data)
write.csv(PolicePractice, "Police_Practice.csv")
write.csv(Police.Killings, "Police.Killings.csv")
PolicePractice$zip = clean.zipcodes(PolicePractice$Location.of.death..zip.code.)
View(PoliceKilling)
View(PoliceKilling)
data("zipcode")
View(zipcode)
PolicePractice$zip = clean.zipcodes(PolicePractice$Location.of.death..zip.code.)
View(PolicePractice)
View(PolicePractice)
=======
setwd("~/Desktop/final_project")
install.packages("dplyr")
install.packages("shiny")
installed.packages("plotly")
install.packages("plotly")
read.csv("police_killings.csv")
setwd("~/Desktop/final_project/data")
read.csv("police_killings.csv")
data <- read.csv("police_killings.csv")
head(data)
View(data)
library(readr)
city_population <- read_csv("~/Desktop/final_project/data/city_population.csv")
View(city_population)
View(city_population)
delete(city_population)
library(readr)
city_population <- read_csv("~/Desktop/final_project/data/city_population.csv")
View(city_population)
View(city_population)
nrow()
nrow(city_population)
library(readr)
city_population <- read_csv("~/Desktop/final_project/data/city_population.csv",
col_names = FALSE, trim_ws = FALSE)
View(city_population)
View(city_population)
View(city_population)
nrow(city_population)
nrow(city_population)[1]
nrow[1](city_population)
nrow[2](city_population)
library(readr)
police_killings <- read_csv("~/Desktop/final_project/data/police_killings.csv")
View(police_killings)
setwd("~/Desktop/final_project")
getwd()
data <- read.csv("/Users/studentuser/Desktop/final_project/data/
police_killings.csv")
setwd("~/Desktop/final_project/data")
data <- read.csv("police_killings.csv")
View(data)
View(city_population)
View(city_population)
data <- as.data.frame(data)
View(data)
View(data)
View(city_population)
data <- read.csv("city_population.csv")
data <- as.data.frame(data)
View(data)
data <- read.csv("city_population.csv")
data <- as.data.frame(data)
View(data)
install.packages("shiny")
install.packages("plotly")
install.packages("dplyr")
summary <- data %>% filter(state)
library(dplyr)
summary <- data %>% filter(state)
summary <- data %>% filter(State)
summary <- data %>% filter(State = "California")
summary <- data %>% filter(State)
summary <- filter(data, State)
summary <- filter(data, State == "California")
View(summary)
summary <-  data %>% filter(State == "California")
View(summary)
summary <-  data %>%
group_by(State, All.People.Killed.by.Police..2013.2015.) %>%
summarise(n())
summary
summary <-  data %>%
group_by(State, All.People.Killed.by.Police..2013.2015.) %>%
summarise(sum(All.People.Killed.by.Police..2013.2015.))
summary()
View(summary())
summary <-  data %>%
group_by(State, All.People.Killed.by.Police..2013.2015.) %>%
summarise(sum(All.People.Killed.by.Police..2013.2015.))
summary()
View(summary)
summary <-  data %>%
group_by(State, All.People.Killed.by.Police..2013.2015.) %>%
summarise(sum(State))
summary <-  data %>%
group_by(State, All.People.Killed.by.Police..2013.2015.) %>%
summarise(sum = sum(State))
summary <-  data %>%
group_by(State) %>%
summarise(sum = sum(All.People.Killed.by.Police..2013.2015.))
View(summary)
summary <-  data %>%
group_by(State) %>%
summarise(All.People.Killed = sum(All.People.Killed.by.Police..2013.2015.))
View(summary)
summary <-  data %>%
group_by(State) %>%
summarise((All.People.Killed = sum(All.People.Killed.by.Police..2013.2015.)),
Black.people = sum(Black.People.Killed.by.Police..2013.2015.))
View(summary)
summary <-  data %>%
group_by(State) %>%
summarise((Total.Population = sum(Total.Population)),
Black.Population = sum(Black)),
White.Population = sum(White)),
All.People.Killed = sum(All.People.Killed.by.Police..2013.2015.)),
Black.people = sum(Black.People.Killed.by.Police..2013.2015.)),
summary <-  data %>%
group_by(State) %>%
summarise((Total.Population = sum(Total.Population)),
Black.Population = sum(Black),
White.Population = sum(White),
All.People.Killed = sum(All.People.Killed.by.Police..2013.2015.),
Black.people = sum(Black.People.Killed.by.Police..2013.2015.))
summary <-  data %>%
group_by(State) %>%
summarise((Total.Population = sum(Total.Population)),
Black.Population = sum(Black),
White.Population = sum(White),
All.People.Killed = sum(All.People.Killed.by.Police..2013.2015.),
Black.people = sum(Black.People.Killed.by.Police..2013.2015.))
summary <-  data %>%
group_by(State) %>%
summarise((Total.Population = sum(Total.Population)),
Black.Population = sum(Black),
White.Population = sum(White),
All.People.Killed = sum(All.People.Killed.by.Police..2013.2015.),
Black.people = sum(Black.People.Killed.by.Police..2013.2015.))
summary <-  data %>%
group_by(State) %>%
summarise((Total.Population = sum(Total.Population)),
Black.Population = sum(Black),
White.Population = sum(White),
All.People.Killed = sum(All.People.Killed.by.Police..2013.2015.),
Black.people = sum(Black.People.Killed.by.Police..2013.2015.))
summary <-  data %>%
group_by(State) %>%
summarise((Total.Population = sum(Total.Population)),
(Black.Population = sum(Black)),
(White.Population = sum(White)),
(All.People.Killed = sum(All.People.Killed.by.Police..2013.2015.)),
(Black.people = sum(Black.People.Killed.by.Police..2013.2015.)))
summary <-  data %>%
group_by(State) %>%
summarise((All.People.Killed = sum(All.People.Killed.by.Police..2013.2015.)),
Black.people = sum(Black.People.Killed.by.Police..2013.2015.))
group_by(State) %>%
summarise(((Total.Population = sum(Total.Population)),
All.People.Killed = sum(All.People.Killed.by.Police..2013.2015.)),
Black.people = sum(Black.People.Killed.by.Police..2013.2015.))
summary <-  data %>%
group_by(State) %>%
summarise(((Total.Population = sum(Total.Population)),
All.People.Killed = sum(All.People.Killed.by.Police..2013.2015.)),
Black.people = sum(Black.People.Killed.by.Police..2013.2015.))
summary <-  data %>%
group_by(State) %>%
summarise((All.People.Killed = sum(All.People.Killed.by.Police..2013.2015.)),
Black.people = sum(Black.People.Killed.by.Police..2013.2015.))
summary <-  data %>%
group_by(State) %>%
summarise((All.People.Killed = sum(All.People.Killed.by.Police..2013.2015.)),
Black.people = sum(Black.People.Killed.by.Police..2013.2015.))
summary <-  data %>%
group_by(State) %>%
summarise((All.People.Killed = sum(All.People.Killed.by.Police..2013.2015.)),
Black.people = sum(Black.People.Killed.by.Police..2013.2015.))
summary <-  data %>%
group_by(State) %>%
summarise(((Total.Population = sum(Total.Population)),
All.People.Killed = sum(All.People.Killed.by.Police..2013.2015.)),
Black.people = sum(Black.People.Killed.by.Police..2013.2015.))
summary <-  data %>%
group_by(State) %>%
summarise(((Total.Population = sum(Total.Population)),
All.People.Killed = sum(All.People.Killed.by.Police..2013.2015.)),
Black.people = sum(Black.People.Killed.by.Police..2013.2015.))
summary <-  data %>%
group_by(State) %>%
summarise(((Total.Population = sum(Total.Population)),
All.People.Killed = sum(All.People.Killed.by.Police..2013.2015.)),
Black.people = sum(Black.People.Killed.by.Police..2013.2015.))
summary <-  data %>%
group_by(State) %>%
summarise(((Total.Population = sum(Total.Population)),
All.People.Killed = sum(All.People.Killed.by.Police..2013.2015.)),
Black.people = sum(Black.People.Killed.by.Police..2013.2015.))
summary <-  data %>%
group_by(State) %>%
summarise((All.People.Killed = sum(All.People.Killed.by.Police..2013.2015.)),
Black.people = sum(Black.People.Killed.by.Police..2013.2015.))
data <- read.csv("city_population.csv")
data <- as.data.frame(data)
library(dplyr)
summary <-  data %>%
group_by(State) %>%
summarise(((Total.Population = sum(Total.Population)),
All.People.Killed = sum(All.People.Killed.by.Police..2013.2015.)),
Black.people = sum(Black.People.Killed.by.Police..2013.2015.))
summary <-  data %>%
group_by(State) %>%
summarise((All.People.Killed = sum(All.People.Killed.by.Police..2013.2015.)),
Black.people = sum(Black.People.Killed.by.Police..2013.2015.))
summary <-  data %>%
group_by(State) %>%
summarise((All.People.Killed = sum(All.People.Killed.by.Police..2013.2015.)),
Black.people = sum(Black.People.Killed.by.Police..2013.2015.))
summary <-  data %>%
group_by(State) %>%
summarise((All.People.Killed = sum(All.People.Killed.by.Police..2013.2015.)),
Black.people = sum(Black.People.Killed.by.Police..2013.2015.))
summary <-  data %>%
group_by(State) %>%
summarise((All.People.Killed = sum(All.People.Killed.by.Police..2013.2015.)),
Black.people = sum(Black.People.Killed.by.Police..2013.2015.))
summary <-  data %>%
group_by(State) %>%
summarise((All.People.Killed = sum(All.People.Killed.by.Police..2013.2015.)),
Black.people = sum(Black.People.Killed.by.Police..2013.2015.))
summary <-  data %>%
group_by(State) %>%
summarise((All.People.Killed = sum(All.People.Killed.by.Police..2013.2015.)),
Black.people = sum(Black.People.Killed.by.Police..2013.2015.))
summary <-  data %>%
group_by(State) %>%
summarise(((Total.Population = sum(Total.Population)),
All.People.Killed = sum(All.People.Killed.by.Police..2013.2015.)),
Black.people = sum(Black.People.Killed.by.Police..2013.2015.))
summary <-  data %>%
group_by(State) %>%
summarise_each(funs(sum))
summary <-  data %>%
group_by(State) %>%
summarise(((Total.Population = sum(Total.Population)),
All.People.Killed = sum(All.People.Killed.by.Police..2013.2015.)),
Black.Deaths = sum(Black.People.Killed.by.Police..2013.2015.))
library(dplyr)
summary <-  data %>%
group_by(State) %>%
summarise(((Total.Population = sum(Total.Population)),
Black.Deaths = sum(Black.People.Killed.by.Police..2013.2015.))
library(dplyr)
summary <-  data %>%
group_by(State) %>%
summarise(((Total.Population = sum(Total.Population)),
Black.Deaths = sum(Black.People.Killed.by.Police..2013.2015.))
library(dplyr)
summary <-  data %>%
group_by(State) %>%
summarise((Total.Population = sum(Total.Population)),
Black.Deaths = sum(Black.People.Killed.by.Police..2013.2015.))
summary <-  data %>%
group_by(State) %>%
summarise(((All.People.Killed = sum(All.People.Killed.by.Police..2013.2015.)),
Total.Population = sum(Total.Population)),
Black.Deaths = sum(Black.People.Killed.by.Police..2013.2015.))
summary <-  data %>%
group_by(State) %>%
summarise(list(All.People.Killed = sum(All.People.Killed.by.Police..2013.2015.)),
(Total.Population = sum(Total.Population)),
(Black.Deaths = sum(Black.People.Killed.by.Police..2013.2015.)))
summary <-  data %>%
group_by(State.Name = State) %>%
summarise(list(All.People.Killed = sum(All.People.Killed.by.Police..2013.2015.)),
(Total.Population = sum(Total.Population)),
(Black.Deaths = sum(Black.People.Killed.by.Police..2013.2015.)))
View(summary)
library(dplyr)
summary <-  data %>%
group_by(State.Name = State) %>%
summarise(list(All.People.Killed = sum(All.People.Killed.by.Police..2013.2015.)),
(Total.Population = sum(Total.Population)),
(Black.Deaths = sum(Black.People.Killed.by.Police..2013.2015.)))
>>>>>>> Linh graph
