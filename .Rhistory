# Render a plotly object that returns your map
output$scatter <- renderPlotly({
if (length(input$search) == 0) {
print("Please select at least one State")
} else {
return(BuildScatter(df, input$search))
}
})
})
runApp('Scatter')
runApp('~/Desktop/sample')
library(shiny)
library(plotly)
library(dplyr)
shinyUI(navbarPage('Electoral College',
# Create a tabPanel to show your scatter plot
tabPanel('Scatter',
# Add a titlePanel to your tab
titlePanel('Black Population vs Black Victim'),
# Create a sidebar layout for this tab (page)
sidebarLayout(
# Create a sidebarPanel for your controls
sidebarPanel(
# Make a textInput widget for searching for a state in your scatter plot
selectInput("search",
label = "Select a State",
choices = unique(df$State),
multiple = T,
options = list(maxItems = 5, placeholder = 'Select a name'),
selected = "Washington"),
plotOutput("termPlot", height = 200),
# Create a main panel, in which you should display your plotly Scatter plot
mainPanel(
plotlyOutput('scatter')
)
)
)
))
shinyUI(navbarPage('Electoral College',
# Create a tabPanel to show your scatter plot
tabPanel('Scatter',
# Add a titlePanel to your tab
titlePanel('Black Population vs Black Victim'),
# Create a sidebar layout for this tab (page)
sidebarLayout(
# Create a sidebarPanel for your controls
sidebarPanel(
# Make a textInput widget for searching for a state in your scatter plot
selectInput("search",
label = "Select a State",
choices = unique(df$State),
multiple = T,
options = list(maxItems = 5, placeholder = 'Select a name'),
selected = "Washington"),
plotOutput("termPlot", height = 200),
# Create a main panel, in which you should display your plotly Scatter plot
mainPanel(
plotlyOutput('scatter')
)
)
)
shinyUI(navbarPage('Electoral College',
# Create a tabPanel to show your scatter plot
tabPanel('Scatter',
# Add a titlePanel to your tab
titlePanel('Black Population vs Black Victim'),
# Create a sidebar layout for this tab (page)
sidebarLayout(
# Create a sidebarPanel for your controls
sidebarPanel(
# Make a textInput widget for searching for a state in your scatter plot
selectInput("search",
label = "Select a State",
choices = unique(df$State),
multiple = T,
options = list(maxItems = 5, placeholder = 'Select a name'),
selected = "Washington"),
plotOutput("termPlot", height = 200)
),
# Create a main panel, in which you should display your plotly Scatter plot
mainPanel(
plotlyOutput('scatter')
)
)
)
))
runApp('Scatter')
runApp('Scatter')
library(shiny)
library(plotly)
library(dplyr)
shinyUI(navbarPage('Electoral College',
# Create a tabPanel to show your scatter plot
tabPanel('Scatter',
# Add a titlePanel to your tab
titlePanel('Black Population vs Black Victim'),
# Create a sidebar layout for this tab (page)
sidebarLayout(
# Create a sidebarPanel for your controls
#sidebarPanel(
# Make a textInput widget for searching for a state in your scatter plot
selectInput("search",
label = "Select a State",
choices = unique(df$State),
multiple = T,
options = list(maxItems = 5, placeholder = 'Select a name'),
selected = "Washington"),
# Create term Plot
plotOutput("termPlot", height = 200),
),
# Create a main panel, in which you should display your plotly Scatter plot
mainPanel(
plotlyOutput('scatter')
)
)
)
))
library(shiny)
library(plotly)
library(dplyr)
shinyUI(navbarPage('Electoral College',
# Create a tabPanel to show your scatter plot
tabPanel('Scatter',
# Add a titlePanel to your tab
titlePanel('Black Population vs Black Victim'),
# Create a sidebar layout for this tab (page)
sidebarLayout(
# Create a sidebarPanel for your controls
#sidebarPanel(
# Make a textInput widget for searching for a state in your scatter plot
selectInput("search",
label = "Select a State",
choices = unique(df$State),
multiple = T,
options = list(maxItems = 5, placeholder = 'Select a name'),
selected = "Washington"),
# Create term Plot
plotOutput("termPlot", height = 200),
),
# Create a main panel, in which you should display your plotly Scatter plot
mainPanel(
plotlyOutput('scatter')
)
)
)
)
library(shiny)
library(plotly)
library(dplyr)
shinyUI(navbarPage('Electoral College',
# Create a tabPanel to show your scatter plot
tabPanel('Scatter',
# Add a titlePanel to your tab
titlePanel('Black Population vs Black Victim'),
# Create a sidebar layout for this tab (page)
sidebarLayout(
# Create a sidebarPanel for your controls
#sidebarPanel(
# Make a textInput widget for searching for a state in your scatter plot
selectInput("search",
label = "Select a State",
choices = unique(df$State),
multiple = T,
options = list(maxItems = 5, placeholder = 'Select a name'),
selected = "Washington"),
# Create term Plot
plotOutput("termPlot", height = 200),
),
# Create a main panel, in which you should display your plotly Scatter plot
mainPanel(
plotlyOutput('scatter')
)
)
)
)
library(shiny)
library(plotly)
library(dplyr)
shinyUI(navbarPage('Electoral College',
# Create a tabPanel to show your scatter plot
tabPanel('Scatter',
# Add a titlePanel to your tab
titlePanel('Black Population vs Black Victim'),
# Create a sidebar layout for this tab (page)
sidebarLayout(
# Create a sidebarPanel for your controls
#sidebarPanel(
# Make a textInput widget for searching for a state in your scatter plot
selectInput("search",
label = "Select a State",
choices = unique(df$State),
multiple = T,
options = list(maxItems = 5, placeholder = 'Select a name'),
selected = "Washington"),
# Create term Plot
plotOutput("termPlot", height = 200),
# Create a main panel, in which you should display your plotly Scatter plot
mainPanel(
plotlyOutput('scatter')
)
)
)
)
shinyUI(navbarPage('Electoral College',
shinyUI(navbarPage('Electoral College',
shinyUI(navbarPage('Electoral College',
shinyUI(navbarPage('Electoral College',
shinyUI(navbarPage('Electoral College',
shinyUI(navbarPage('Electoral College',
shinyUI(navbarPage('Electoral College',
shinyUI(navbarPage('Electoral College',
shinyUI(navbarPage('Electoral College',
# Create a tabPanel to show your scatter plot
tabPanel('Scatter',
# Add a titlePanel to your tab
titlePanel('Black Population vs Black Victim'),
# Create a sidebar layout for this tab (page)
sidebarLayout(
# Create a sidebarPanel for your controls
#sidebarPanel(
# Make a textInput widget for searching for a state in your scatter plot
selectizeInput("search",
label = "Select a State",
choices = unique(df$State),
multiple = T,
options = list(maxItems = 5, placeholder = 'Select a name'),
selected = "Washington"),
# Create term Plot
#plotOutput("termPlot", height = 200),
# Create a main panel, in which you should display your plotly Scatter plot
mainPanel(
plotlyOutput('scatter')
)
)
)
))
shinyUI(navbarPage('Electoral College',
# Create a tabPanel to show your scatter plot
tabPanel('Scatter',
# Add a titlePanel to your tab
titlePanel('Black Population vs Black Victim'),
# Create a sidebar layout for this tab (page)
sidebarLayout(
# Create a sidebarPanel for your controls
#sidebarPanel(
# Make a textInput widget for searching for a state in your scatter plot
selectizeInput("search",
label = "Select a State",
choices = unique(df$State),
multiple = T,
options = list(maxItems = 5, placeholder = 'Select a name'),
selected = "Washington"),
# Create term Plot
#plotOutput("termPlot", height = 200),
# Create a main panel, in which you should display your plotly Scatter plot
mainPanel(
plotlyOutput('scatter')
)
)
)
))
library(shiny)
library(plotly)
library(dplyr)
shinyUI(navbarPage('Electoral College',
# Create a tabPanel to show your scatter plot
tabPanel('Scatter',
# Add a titlePanel to your tab
titlePanel('Black Population vs Black Victim'),
# Create a sidebar layout for this tab (page)
sidebarLayout(
# Create a sidebarPanel for your controls
#sidebarPanel(
# Make a textInput widget for searching for a state in your scatter plot
selectizeInput("search",
label = "Select a State",
choices = unique(df$State),
multiple = T,
options = list(maxItems = 5, placeholder = 'Select a name'),
selected = "Washington"),
# Create term Plot
#plotOutput("termPlot", height = 200),
# Create a main panel, in which you should display your plotly Scatter plot
mainPanel(
plotlyOutput('scatter')
)
)
)
))
runApp('Scatter')
runApp('Scatter')
runApp('Scatter')
runApp('Scatter')
runApp('Scatter')
library(shiny)
library(ggplot2)
library(dplyr)
library(plotly)
setwd('~/Desktop/final_project')
data <- read.csv('data/city_population.csv')
data <- as.data.frame(data)
### Build Scatter ###
BuildScatter <- function(df,  search = '',
xvar = 'Black.Population.Percentage', yvar = 'Black.Victim.Percentage') {
# Filter down to state(s), then graphs
# Get x and y max
xmax <- max(df[,xvar]) * 1.5
ymax <- max(df[,yvar]) * 1.5
x.equation <- paste0('~', xvar)
y.equation <- paste0('~', yvar)
df <- df %>%
filter(grepl(search, State))
plot_ly(data = df, x = eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)),
mode='markers',
marker = list(
text = ~df$State
opacity = .4,
size = 10
)) %>%
layout(xaxis = list(range = c(0, xmax), title = "Black Population Percentage"),
yaxis = list(range = c(0, ymax), title = "Black Victim Percentage")
) %>%
return()
}
data.summary <- data %>%
group_by(State) %>%
summarise(Total.Population = sum(Total.Population),
White.People = sum(White),
Black.Population = sum(Black),
Total.Killed.by.Police = sum (All.People.Killed.by.Police..2013.2015.),
Black.Killed.by.Police = sum(Black.People.Killed.by.Police..2013.2015.))
# Adding columns of Black Population percentage of each state &
#Black Killed Population of Police Brutality Cases
df <- data.summary %>%
filter(State != "United States") %>%
mutate(Black.Population.Percentage = Black.Population / Total.Population * 100) %>%
mutate(Black.Victim.Percentage = Black.Killed.by.Police / Total.Killed.by.Police * 100)
# Start shinyServer
shinyServer(function(input, output, session) {
# Render a plotly object that returns your map
output$scatter <- renderPlotly({
return(BuildScatter(df, input$search))
#}
})
})
runApp('Scatter')
library(shiny)
library(ggplot2)
library(dplyr)
library(plotly)
setwd('~/Desktop/final_project')
data <- read.csv('data/city_population.csv')
data <- as.data.frame(data)
### Build Scatter ###
BuildScatter <- function(df,  search = '',
xvar = 'Black.Population.Percentage', yvar = 'Black.Victim.Percentage') {
# Filter down to state(s), then graphs
# Get x and y max
xmax <- max(df[,xvar]) * 1.5
ymax <- max(df[,yvar]) * 1.5
x.equation <- paste0('~', xvar)
y.equation <- paste0('~', yvar)
df <- df %>%
filter(grepl(search, State))
plot_ly(data = df, x = eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)),
mode='markers',
marker = list(
text = search,
opacity = .4,
size = 10
)) %>%
layout(xaxis = list(range = c(0, xmax), title = "Black Population Percentage"),
yaxis = list(range = c(0, ymax), title = "Black Victim Percentage")
) %>%
return()
}
data.summary <- data %>%
group_by(State) %>%
summarise(Total.Population = sum(Total.Population),
White.People = sum(White),
Black.Population = sum(Black),
Total.Killed.by.Police = sum (All.People.Killed.by.Police..2013.2015.),
Black.Killed.by.Police = sum(Black.People.Killed.by.Police..2013.2015.))
# Adding columns of Black Population percentage of each state &
#Black Killed Population of Police Brutality Cases
df <- data.summary %>%
filter(State != "United States") %>%
mutate(Black.Population.Percentage = Black.Population / Total.Population * 100) %>%
mutate(Black.Victim.Percentage = Black.Killed.by.Police / Total.Killed.by.Police * 100)
# Start shinyServer
shinyServer(function(input, output, session) {
# Render a plotly object that returns your map
output$scatter <- renderPlotly({
return(BuildScatter(df, input$search))
#}
})
})
runApp('Scatter')
runApp('~/Desktop/m14-shiny/exercise-4')
runApp('Scatter')
runApp('Scatter')
library(shiny)
library(ggplot2)
library(dplyr)
library(plotly)
setwd('~/Desktop/final_project')
data <- read.csv('data/city_population.csv')
data <- as.data.frame(data)
### Build Scatter ###
BuildScatter <- function(df,  search = '',
xvar = 'Black.Population.Percentage', yvar = 'Black.Victim.Percentage') {
# Filter down to state(s), then graphs
# Get x and y max
xmax <- max(df[,xvar]) * 1.5
ymax <- max(df[,yvar]) * 1.5
x.equation <- paste0('~', xvar)
y.equation <- paste0('~', yvar)
df <- df %>%
filter(grepl(search, State))
plot_ly(data = df, x = eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)),
mode='markers',
marker = list(
hovertext = ~df$State
opacity = .4,
size = 10
)) %>%
layout(xaxis = list(range = c(0, xmax), title = "Black Population Percentage"),
yaxis = list(range = c(0, ymax), title = "Black Victim Percentage")
) %>%
return()
}
data.summary <- data %>%
group_by(State) %>%
summarise(Total.Population = sum(Total.Population),
White.People = sum(White),
Black.Population = sum(Black),
Total.Killed.by.Police = sum (All.People.Killed.by.Police..2013.2015.),
Black.Killed.by.Police = sum(Black.People.Killed.by.Police..2013.2015.))
# Adding columns of Black Population percentage of each state &
#Black Killed Population of Police Brutality Cases
df <- data.summary %>%
filter(State != "United States") %>%
mutate(Black.Population.Percentage = Black.Population / Total.Population * 100) %>%
mutate(Black.Victim.Percentage = Black.Killed.by.Police / Total.Killed.by.Police * 100)
# Start shinyServer
shinyServer(function(input, output, session) {
# Render a plotly object that returns your map
output$scatter <- renderPlotly({
return(BuildScatter(df, input$search))
#}
})
})
runApp('Scatter')
runApp('Scatter')
runApp('Scatter')
library(shiny)
library(ggplot2)
library(dplyr)
library(plotly)
setwd('~/Desktop/final_project')
data <- read.csv('data/city_population.csv')
data <- as.data.frame(data)
### Build Scatter ###
BuildScatter <- function(df,  search = '',
xvar = 'Black.Population.Percentage', yvar = 'Black.Victim.Percentage') {
# Filter down to state(s), then graphs
# Get x and y max
xmax <- max(df[,xvar]) * 1.5
ymax <- max(df[,yvar]) * 1.5
x.equation <- paste0('~', xvar)
y.equation <- paste0('~', yvar)
df <- df %>%
filter(grepl(search, State))
plot_ly((data = df, x = eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)), text = search),
mode='markers',
marker = list(
opacity = .4,
size = 10
)) %>%
layout(xaxis = list(range = c(0, xmax), title = "Black Population Percentage"),
yaxis = list(range = c(0, ymax), title = "Black Victim Percentage")
) %>%
return()
}
data.summary <- data %>%
group_by(State) %>%
summarise(Total.Population = sum(Total.Population),
White.People = sum(White),
Black.Population = sum(Black),
Total.Killed.by.Police = sum (All.People.Killed.by.Police..2013.2015.),
Black.Killed.by.Police = sum(Black.People.Killed.by.Police..2013.2015.))
# Adding columns of Black Population percentage of each state &
#Black Killed Population of Police Brutality Cases
df <- data.summary %>%
filter(State != "United States") %>%
mutate(Black.Population.Percentage = Black.Population / Total.Population * 100) %>%
mutate(Black.Victim.Percentage = Black.Killed.by.Police / Total.Killed.by.Police * 100)
# Start shinyServer
shinyServer(function(input, output, session) {
# Render a plotly object that returns your map
output$scatter <- renderPlotly({
return(BuildScatter(df, input$search))
#}
})
})
runApp('Scatter')
runApp('Scatter')
runApp('Scatter')
