table.data<- rename(table.data, Name= name)
table.data <- data.frame(select(user.repo.data, name, id, html_url, Date_created))
table.data<- rename(table.data, ID = id, link = html_url, created = Date_created)
table.data<- rename(table.data, Name = name, ID = id, Link = html_url, Created = Date_created)
table.data<- rename(table.data, link = html_url, created = Date_created)
table.data
table.data<- rename(table.data, link = html_url, created = Date_created)
table.data<- rename(table.data, ID = id, link = html_url, created = Date_created)
table.data<- rename(table.data, Name = name, ID = id, link = html_url, created = Date_created)
table.data <- rename(table.data, Name = name, ID = id, link = html_url, created = Date_created)
table.data <- rename(table.data, link = html_url, created = Date_created)
table.data <- data.frame(select(user.repo.data, name, id, html_url, Date_created))
table.data <- rename(table.data, link = html_url, created = Date_created)
print(most_popular)
print(num_repos)
num_repos <- nrow(user.repo.data)
print(num_repos)
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(jsonlite)
library(dplyr)
base.url <- "https://api.github.com/users/"
key <- '7a115f8cefe3a8dadb0d52a71b65ae9a433459bb'
get.user.info <- function(username) {
query.url <- paste0(base.url, username, '?/access_token=' , key)
results <- fromJSON(query.url)
return(results)
}
user.info <- get.user.info('mbostock')
# user.info <- do.call(rbind.data.frame, user.info)
# user.info <- flatten(user.info)
user.login <- user.info$login
avatar.login <- user.info$avatar_url
#   https://api.github.com/users/mbostock/repos?per_page=100&sort=created&order=desc?/access_token=7a115f8cefe3a8dadb0d52a71b65ae9a433459bb
get.repo.data <- function(username) {
repo.url <- paste0(base.url, username, '/repos?per_page=100&sort=created&order=desc?/access_token=', key)
repo.data <- fromJSON(repo.url)
repo.data <- data.frame(repo.data, stringsAsFactors = FALSE)
repo.data <- flatten(repo.data)
return(repo.data)
}
user.repo.data <- get.repo.data('mbostock')
num_repos <- nrow(user.repo.data)
print(num_repos)
most_popular <- (filter(user.repo.data, forks_count == max(forks_count)) %>% select(name))
print(most_popular)
```
# `r user.login`
![]( `r avatar.login` )
- `r num_repos` repositories
- Most popular repository: `r most_popular`
```{r, echo = FALSE}
user.repo.data <- mutate(user.repo.data, Date_created = format.Date(created_at, format = "%b %d %Y"))
table.data <- data.frame(select(user.repo.data, name, id, html_url, Date_created))
table.data <- rename(table.data, link = html_url, created = Date_created)
```
kable(table.data)
library(knitr)
#  DATA MANIPULATION
user.repo.data <- mutate(user.repo.data, Date_created = format.Date(created_at, format = "%b %d %Y"))
table.data <- data.frame(select(user.repo.data, name, id, html_url, Date_created))
table.data <- rename(table.data, link = html_url, created = Date_created)
#  CREATING TABLES
kable(table.data)
kable(table.data, align = 1)
kable(table.data, align)
kable(table.data)
View(user.repo.data)
summary(table.data)
View(table.data)
View(user.repo.data)
lang.data <- data.frame(group_by(user.repo.data, language))
View(lang.data)
lang.data <- group_by(user.repo.data, language) %>%
mean(forks))
lang.data <- group_by(user.repo.data, language) %>%
mean(forks)
lang.data <- group_by(user.repo.data, language) %>%
mean(user.repo.data$forks)
fork.avg <- group_by(user.repo.data, language) %>%
summarise(mean(forks))
num.forks <- group_by(user.repo.data, language) %>%
summarise(count = n())
View(num.forks)
View(fork.avg)
fork.avg <- group_by(user.repo.data, language) %>%
summarise(round(mean(forks)))
View(fork.avg)
fork.avg <- group_by(user.repo.data, language) %>%
summarise(round(mean(forks)), digits = 3)
View(fork.avg)
fork.avg <- group_by(user.repo.data, language) %>%
summarise(mean(forks))
View(fork.avg)
fork.avg <- group_by(user.repo.data, language) %>%
summarise(mean(forks)) %>%
round(digits = 3)
fork.avg <- round(fork.avg
fork.avg <- group_by(user.repo.data, language) %>%
summarise((mean(forks))
fork.avg <- round(fork.avg, digits = 3)
lang.data <- left.join(fork.avg, num.forks)
lang.data <- join(fork.avg, num.forks)
lang.data <- merge(fork.avg, num.forks)
View(lang.data)
lang.data <- rename(Average_num_forks = mean(forks), Total_forks = count)
lang.data <- rename(lang.data, Average_num_forks = mean(forks), Total_forks = count)
lang.data <- rename_(lang.data, 'Average_num_forks' = 'mean(forks)', 'Total_forks' = 'count')
View(lang.data)
lang.data <- data.frame(merge(fork.avg, num.forks))
View(lang.data)
kable(lang.data)
fork.avg <- data.frame(group_by(user.repo.data, language) %>%
summarise((mean(forks)))
num.forks <- data.frame(group_by(user.repo.data, language) %>%
summarise(count = n()))
lang.data <- data.frame(merge(fork.avg, num.forks))
kable(lang.data)
plot(lang.data)
bar.graph <- table(num.forks)
barplot(num.forks, main="Forks in Each Language", xlab = language, ylab = number of forks)
bar.graph <- table(num.forks)
barplot(num.forks, main="Forks in Each Language", xlab = "language", ylab = "number of forks")
barplot(num.forks, main="Forks in Each Language", xlab = "language")
View(fork.avg)
bar.graph <- table(num.forks)
barplot(num.forks, main="Forks in Each Language", xlab = "language")
fork.avg <- data.frame(group_by(user.repo.data, language) %>%
summarise((mean(forks)))
num.forks <- data.frame(group_by(user.repo.data, language) %>%
summarise(count = n())))
lang.data <- data.frame(merge(fork.avg, num.forks)
kable(lang.data)
fork.avg <- group_by(user.repo.data, language) %>%
summarise((mean(forks))
num.forks <- group_by(user.repo.data, language) %>%
summarise(count = n()))
lang.data <- data.frame(merge(fork.avg, num.forks)
kable(lang.data)
fork.avg <- group_by(user.repo.data, language) %>%
summarise((mean(forks))
num.forks <- group_by(user.repo.data, language) %>%
summarise(count = n()))
lang.data <- data.frame(merge(fork.avg, num.forks))
kable(lang.data)
lang.data <- group_by(user.repo.data, language) %>%
summarise((mean(forks), count = n())
lang.data <- group_by(user.repo.data, language) %>%
summarise(mean(forks), count = n())
View(lang.data)
kable(lang.data)
lang.data <- data.frame(group_by(user.repo.data, language) %>%
summarise(mean(forks), count = n()))
kable(lang.data)
lang.data <- data.frame(group_by(user.repo.data, language) %>%
summarise(Average_number_forks = mean(forks), Total_forks = n()))
lang.data <- data.frame(group_by(user.repo.data, language) %>%
summarise(Average_number_forks = mean(forks), Total_forks = n()))
kable(lang.data)
summarise(Average_number_forks = mean(forks), Total_forks = n(forks)))
lang.data <- data.frame(group_by(user.repo.data, language) %>%
summarise(Average_number_forks = mean(forks), Total_forks = n()))
kable(lang.data)
library(jsonlite)
library(dplyr)
library(knitr)
#  QUERYING DATA
base.url <- "https://api.github.com/users/"
key <- '7a115f8cefe3a8dadb0d52a71b65ae9a433459bb'
get.user.info <- function(username) {
query.url <- paste0(base.url, username, '?/access_token=' , key)
results <- fromJSON(query.url)
return(results)
}
user.info <- get.user.info('mbostock')
# user.info <- do.call(rbind.data.frame, user.info)
# user.info <- flatten(user.info)
user.login <- user.info$login
avatar.login <- user.info$avatar_url
#   https://api.github.com/users/mbostock/repos?per_page=100&sort=created&order=desc?/access_token=7a115f8cefe3a8dadb0d52a71b65ae9a433459bb
get.repo.data <- function(username) {
repo.url <- paste0(base.url, username, '/repos?per_page=100&sort=created&order=desc?/access_token=', key)
repo.data <- fromJSON(repo.url)
repo.data <- data.frame(repo.data, stringsAsFactors = FALSE)
repo.data <- flatten(repo.data)
return(repo.data)
}
user.repo.data <- get.repo.data('mbostock')
num_repos <- nrow(user.repo.data)
most_popular <- (filter(user.repo.data, forks_count == max(forks_count)) %>% select(name))
#  MARKDOWN PT 1
#  DATA MANIPULATION
user.repo.data <- mutate(user.repo.data, Date_created = format.Date(created_at, format = "%b %d %Y"))
table.data <- data.frame(select(user.repo.data, name, id, html_url, Date_created))
table.data <- rename(table.data, link = html_url, created = Date_created)
#  CREATING TABLES
kable(table.data)
The following table displays the number of repositories in each language and the average number for forks for each language across the repositories.
lang.data <- data.frame(group_by(user.repo.data, language) %>%
summarise(Average_number_forks = mean(forks), Total_forks = n()))
kable(lang.data)
lang.data <- group_by(user.repo.data, language) %>%
summarise(Average_number_forks = mean(forks), Total_forks = n())
kable(lang.data)
library(jsonlite)
library(dplyr)
library(knitr)
#  QUERYING DATA
base.url <- "https://api.github.com/users/"
key <- '7a115f8cefe3a8dadb0d52a71b65ae9a433459bb'
get.user.info <- function(username) {
query.url <- paste0(base.url, username, '?/access_token=' , key)
results <- fromJSON(query.url)
return(results)
}
user.info <- get.user.info('mbostock')
# user.info <- do.call(rbind.data.frame, user.info)
# user.info <- flatten(user.info)
user.login <- user.info$login
avatar.login <- user.info$avatar_url
#   https://api.github.com/users/mbostock/repos?per_page=100&sort=created&order=desc?/access_token=7a115f8cefe3a8dadb0d52a71b65ae9a433459bb
get.repo.data <- function(username) {
repo.url <- paste0(base.url, username, '/repos?per_page=100&sort=created&order=desc?/access_token=', key)
repo.data <- fromJSON(repo.url)
repo.data <- data.frame(repo.data, stringsAsFactors = FALSE)
repo.data <- flatten(repo.data)
return(repo.data)
}
user.repo.data <- get.repo.data('mbostock')
num_repos <- nrow(user.repo.data)
most_popular <- (filter(user.repo.data, forks_count == max(forks_count)) %>% select(name))
#  MARKDOWN PT 1
#  DATA MANIPULATION
user.repo.data <- mutate(user.repo.data, Date_created = format.Date(created_at, format = "%b %d %Y"))
table.data <- data.frame(select(user.repo.data, name, id, html_url, Date_created))
table.data <- rename(table.data, link = html_url, created = Date_created)
#  CREATING TABLES
kable(table.data)
lang.data <- data.frame(group_by(user.repo.data, language) %>%
summarise(Average_number_forks = mean(forks), Total_forks = n()))
kable(lang.data)
#  CHALLENGE
#  bar.graph <- table(num.forks)
#  barplot(num.forks, main="Forks in Each Language", xlab = "language")
)
library(jsonlite)
library(dplyr)
library(knitr)
#  QUERYING DATA
base.url <- "https://api.github.com/users/"
key <- '7a115f8cefe3a8dadb0d52a71b65ae9a433459bb'
get.user.info <- function(username) {
query.url <- paste0(base.url, username, '?/access_token=' , key)
results <- fromJSON(query.url)
return(results)
}
user.info <- get.user.info('mbostock')
# user.info <- do.call(rbind.data.frame, user.info)
# user.info <- flatten(user.info)
user.login <- user.info$login
avatar.login <- user.info$avatar_url
#   https://api.github.com/users/mbostock/repos?per_page=100&sort=created&order=desc?/access_token=7a115f8cefe3a8dadb0d52a71b65ae9a433459bb
get.repo.data <- function(username) {
repo.url <- paste0(base.url, username, '/repos?per_page=100&sort=created&order=desc?/access_token=', key)
repo.data <- fromJSON(repo.url)
repo.data <- data.frame(repo.data, stringsAsFactors = FALSE)
repo.data <- flatten(repo.data)
return(repo.data)
}
user.repo.data <- get.repo.data('mbostock')
num_repos <- nrow(user.repo.data)
most_popular <- (filter(user.repo.data, forks_count == max(forks_count)) %>% select(name))
#  MARKDOWN PT 1
#  DATA MANIPULATION
user.repo.data <- mutate(user.repo.data, Date_created = format.Date(created_at, format = "%b %d %Y"))
table.data <- data.frame(select(user.repo.data, name, id, html_url, Date_created))
table.data <- rename(table.data, link = html_url, created = Date_created)
#  CREATING TABLES
kable(table.data)
lang.data <- data.frame(group_by(user.repo.data, language) %>%
summarise(Average_number_forks = mean(forks), Total_forks = n()))
kable(lang.data)
#  CHALLENGE
#  bar.graph <- table(num.forks)
#  barplot(num.forks, main="Forks in Each Language", xlab = "language")
bar.graph <- table(num.forks)
bar.graph <- table(lang.data)
barplot(num.forks, main="Forks in Each Language", xlab = "language")
barplot(lang.data, main="Forks in Each Language", xlab = "language")
View(user.repo.data)
bar.graph <- table(lang.data(select(lang.data, language, total forks)))
num.forks.per.lang <- (lang.data, language, Total_forks)
num.forks <- select(lang.data, language, Total_forks)
View(num.forks)
bar.graph <- table(num.forks)
plot(num.forks)
total.forks <- c(lang.data$Total_forks)
barplot(total.forks)
barplot(lang.data$Total_forks)
barplot(lang.data$Total_forks)
barplot(lang.data$Total_forks, main="Forks per Language", xlab="Language", ylab="Forks", names.arg = total.langs)
barplot(lang.data$Total_forks, main="Forks per Language", xlab="Language", ylab="Forks", names.arg = lang.data$lang.data$language)
barplot(lang.data$Total_forks, main="Forks per Language", xlab="Language", ylab="Forks", names.arg = lang.data$language)
barplot(lang.data$Total_forks, main="Forks per Language", xlab="Language (blank = NA)", ylab="Forks", names.arg = lang.data$language)
barplot(lang.data$Total_forks, main="Forks per Language", xlab="Language (blank = NA)", ylab="Forks", names.arg = lang.data$language, col = blue)
barplot(lang.data$Total_forks, main="Forks per Language", xlab="Language (blank = NA)", ylab="Forks", names.arg = lang.data$language, col = "pink")
barplot(lang.data$Total_forks, main="Forks per Language", xlab="Language (blank = NA)", ylab="Forks", names.arg = lang.data$language, col = rainbow(lang.data$language))
num.langs <- summarise(lang.data, num = n())
View(num.langs)
barplot(lang.data$Total_forks, main="Forks per Language", xlab="Language (blank = NA)", ylab="Forks", names.arg = lang.data$language, col = rainbow(num.langs))
query.url <- paste0(base.url, username, '?/access_token=' , key)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='shaarika',
token='A1BC99CC3389FCB9551DEEB129FA326F',
secret='<SECRET>')
rsconnect::setAccountInfo(name='shaarika', token='A1BC99CC3389FCB9551DEEB129FA326F', secret='4vkpvaYvm0DdYhMHEqzBsdxRVMFtxc4QjXbr1E27')
rsconnect::setAccountInfo(name='shaarika', token='A1BC99CC3389FCB9551DEEB129FA326F', secret='4vkpvaYvm0DdYhMHEqzBsdxRVMFtxc4QjXbr1E27')
install.packages(c('ggplot2', 'shiny'))
shiny::runApp()
runApp('College/UW/INFO201/a8-building-apps-shaarika')
runApp('College/UW/INFO201/a8-building-apps-shaarika')
df <- load("iris")
source('~/.active-rstudio-document', echo=TRUE)
df <- data("iris")
df <- data("iris.RData")
iris.data <- data.frame(iris)
View(iris.data)
View(iris)
shinyServer(function(input, output) {
datasetInput <- reactive({
switch(input$dataset,
"Setosa" = Setosa,
"Versicolor" = Versicolor,
"Virginica" = Virginica)
})
x    <- input$dataset[, 1]  # Iris petal length
shinyServer(function(input, output) {
datasetInput <- reactive({
switch(input$dataset,
"Setosa" = Setosa,
"Versicolor" = Versicolor,
"Virginica" = Virginica)
})
output$distPlot <- renderPlot({
x    <- input$dataset[, 1]  # Iris petal length
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# Show the first "n" observations ???
head(datasetInput(), n = input$obs)
hist(x, breaks = bins, col = 'purple', border = 'white')
})
setwd("~/College/UW/INFO201/a8-building-apps-shaarika")
shinyServer(function(input, output) {
datasetInput <- reactive({
switch(input$dataset,
"Setosa" = Setosa,
"Versicolor" = Versicolor,
"Virginica" = Virginica)
})
output$distPlot <- renderPlot({
x    <- input$dataset[, 1]  # Iris petal length
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# Show the first "n" observations ???
head(datasetInput(), n = input$obs)
hist(x, breaks = bins, col = 'purple', border = 'white')
})
data("iris")
iris.data <- data.frame(iris)
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
Setosa <- filter(iris, Species == "setosa") %>%
select(Petal.Length)
Versicolor <- filter(iris, Species == "versicolor") %>%
select(Petal.Length)
Virginica <- filter(iris, Species == "virginica") %>%
select(Petal.Length)
shinyServer(function(input, output) {
datasetInput <- reactive({
switch(input$dataset,
"Setosa" = Setosa,
"Versicolor" = Versicolor,
"Virginica" = Virginica)
})
output$distPlot <- renderPlot({
x    <- input$dataset[, 1]  # Iris petal length
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# Show the first "n" observations ???
head(datasetInput(), n = input$obs)
hist(x, breaks = bins, col = 'purple', border = 'white')
})
}
data("iris")
iris.data <- data.frame(iris)
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
Setosa <- filter(iris, Species == "setosa") %>%
select(Petal.Length)
Versicolor <- filter(iris, Species == "versicolor") %>%
select(Petal.Length)
Virginica <- filter(iris, Species == "virginica") %>%
select(Petal.Length)
shinyServer(function(input, output) {
datasetInput <- reactive({
switch(input$dataset,
"Setosa" = Setosa,
"Versicolor" = Versicolor,
"Virginica" = Virginica)
})
output$distPlot <- renderPlot({
x    <- input$dataset[, 1]  # Iris petal length
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# Show the first "n" observations ???
head(datasetInput(), n = input$obs)
hist(x, breaks = bins, col = 'purple', border = 'white')
})
}
Setosa <- filter(iris, Species == "setosa") %>%
select(Petal.Length)
Versicolor <- filter(iris, Species == "versicolor") %>%
select(Petal.Length)
Virginica <- filter(iris, Species == "virginica") %>%
select(Petal.Length)
Setosa <- filter(iris, Species == "setosa") %>%
select(Petal.Length)
Versicolor <- filter(iris, Species == "versicolor") %>%
select(Petal.Length)
Virginica <- filter(iris, Species == "virginica") %>%
select(Petal.Length)
shinyServer(function(input, output) {
datasetInput <- reactive({
switch(input$dataset,
"Setosa" = Setosa,
"Versicolor" = Versicolor,
"Virginica" = Virginica)
})
output$distPlot <- renderPlot({
x    <- input$dataset[, 1]  # Iris petal length
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# Show the first "n" observations ???
head(datasetInput(), n = input$obs)
hist(x, breaks = bins, col = 'purple', border = 'white')
})
}
Setosa <- filter(iris, Species == "setosa") %>%
select(Petal.Length)
Versicolor <- filter(iris, Species == "versicolor") %>%
select(Petal.Length)
library(dplyr)
Setosa <- filter(iris, Species == "setosa") %>%
select(Petal.Length)
Versicolor <- filter(iris, Species == "versicolor") %>%
select(Petal.Length)
Virginica <- filter(iris, Species == "virginica") %>%
select(Petal.Length)
View(Setosa)
shinyServer(function(input, output) {
datasetInput <- reactive({
switch(input$dataset,
"Setosa" = Setosa,
"Versicolor" = Versicolor,
"Virginica" = Virginica)
})
output$distPlot <- renderPlot({
x    <- input$dataset[, 1]  # Iris petal length
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# Show the first "n" observations ???
head(datasetInput(), n = input$obs)
hist(x, breaks = bins, col = 'purple', border = 'white')
})
}
x    <- input$dataset[, 1]  # Iris petal length
shiny::runApp('College/UW/INFO201/a8-building-apps-shaarika')
runApp('College/UW/INFO201/a8-building-apps-shaarika')
runApp('College/UW/INFO201/a8-building-apps-shaarika')
shiny::runApp('College/UW/INFO201/a8-building-apps-shaarika')
shiny::runApp('College/UW/INFO201/final_project/main')
runApp('College/UW/INFO201/final_project/main')
runApp('College/UW/INFO201/final_project/main')
runApp('College/UW/INFO201/final_project/main')
runApp('College/UW/INFO201/final_project/main')
runApp('College/UW/INFO201/final_project/main')
runApp('College/UW/INFO201/final_project/main')
runApp('College/UW/INFO201/final_project/main')
runApp('College/UW/INFO201/final_project/main')
runApp('College/UW/INFO201/final_project/barchart')
runApp('College/UW/INFO201/final_project/main')
runApp('College/UW/INFO201/final_project/main')
runApp('College/UW/INFO201/final_project/main')
runApp('College/UW/INFO201/final_project/main')
runApp('College/UW/INFO201/final_project/main')
runApp('College/UW/INFO201/final_project/main')
runApp('College/UW/INFO201/final_project/main')
runApp('College/UW/INFO201/final_project/main')
runApp('College/UW/INFO201/final_project/main')
runApp('College/UW/INFO201/final_project/main')
runApp('College/UW/INFO201/final_project/main')
runApp('College/UW/INFO201/final_project/main')
runApp('College/UW/INFO201/final_project/main')
runApp('College/UW/INFO201/final_project/main')
runApp('College/UW/INFO201/final_project/main')
runApp('College/UW/INFO201/final_project/main')
runApp('College/UW/INFO201/final_project/main')
runApp('College/UW/INFO201/final_project/main')
runApp('College/UW/INFO201/final_project/main')
runApp('College/UW/INFO201/final_project/main')
runApp('College/UW/INFO201/final_project/main')
runApp('College/UW/INFO201/final_project/main')
runApp('College/UW/INFO201/final_project/main')
runApp('College/UW/INFO201/final_project/main')
runApp('College/UW/INFO201/final_project/main')
runApp('College/UW/INFO201/final_project/main')
runApp('College/UW/INFO201/final_project/main')
runApp('College/UW/INFO201/final_project/main')
