# install.packages('zipcode')
library(zipcode)
library(dplyr)
# load zipcode packages
data("zipcode")
# clean zipcodes in original data file
police.data.original <- read.csv('data/police_original.csv', stringsAsFactors = FALSE)
police.data.original$zip <- clean.zipcodes(police.data.original$zip)
# adding age group column for sorting by age
defineAgeGroup <- function(min, max) {
police.age.group <- filter(police.data.original, age >= min, age < max) %>%
mutate(age.group = paste0(min, ' - ', max))
return (police.age.group)
}
# adding age group column for unknowns
defineUnknowns <- function() {
police.age.group <- filter(police.data.original, age == 'Unknown') %>%
mutate(age.group = 'Unknown')
return (police.age.group)
}
# binding the relevant datasets
police.data.final <- rbind(defineAgeGroup(0, 15), defineAgeGroup(15, 30),
defineAgeGroup(30, 45), defineAgeGroup(45, 60),
defineAgeGroup(60, 75), defineAgeGroup(75, 90),
defineAgeGroup(90, 105), defineUnknowns())
# modify zipcodes data file
keeps <- c('zip', 'latitude', 'longitude')
zipcode.modified <- zipcode[keeps]
# merge both data files by zipcode
police.data.final <- merge(police.data.final, zipcode.modified, by = 'zip')
# export file
write.csv(police.data.final, 'data/police_final.csv')
setwd("~/OneDrive/Documents/School/INFO 201/Assignments/final_project")
# install.packages('zipcode')
library(zipcode)
library(dplyr)
# load zipcode packages
data("zipcode")
# clean zipcodes in original data file
police.data.original <- read.csv('data/police_original.csv', stringsAsFactors = FALSE)
police.data.original$zip <- clean.zipcodes(police.data.original$zip)
# modify zipcodes data file
keeps <- c('zip', 'latitude', 'longitude')
zipcode.modified <- zipcode[keeps]
# merge both data files by zipcode
police.data.final <- merge(police.data.original, zipcode.modified, by = 'zip')
# adding age group column for sorting by age
defineAgeGroup <- function(min, max) {
police.age.group <- filter(police.data.final, age >= min, age < max) %>%
mutate(age.group = paste0(min, ' - ', max))
return (police.age.group)
}
# adding age group column for unknowns
defineUnknowns <- function() {
police.age.group <- filter(police.data.final, age == 'Unknown') %>%
mutate(age.group = 'Unknown')
return (police.age.group)
}
# binding the relevant datasets
police.data.final <- rbind(defineAgeGroup(0, 15), defineAgeGroup(15, 30),
defineAgeGroup(30, 45), defineAgeGroup(45, 60),
defineAgeGroup(60, 75), defineAgeGroup(75, 90),
defineAgeGroup(90, 105), defineUnknowns())
# export file
write.csv(police.data.final, 'data/police_final.csv')
library(shiny)
library(plotly)
library(leaflet)
setwd("~/OneDrive/Documents/School/INFO 201/Assignments/final_project")
police.data <- read.csv('data/police_final.csv')
shinyServer(function(input, output) {
# renders leaflet map
output$map <- renderPlotly({
#   1. Asian, 2. Black, 3. Hispanic, 4. Native, 5. Pacific, 6. Unknown, 7. White
colors1 <- c('brown', 'blue', 'red', 'green', 'yellow', 'purple', 'orange')
races <- c('White', 'Black', 'Asian', 'Hispanic', 'Native American',
'Unknown race', 'Pacific Islander')
#   1. Allegedly Armed, 2. Unarmed, 3. Unclear, 4. Vehicle
colors2 <- c('red', 'blue', 'purple', 'orange')
armed <- c('Allegedly Armed', 'Unclear', 'Vehicle', 'Unarmed')
pal_race <- colorFactor(colors1, domain = races)
pal_armed <- colorFactor(colors2, domain = armed)
pal_age <- colorFactor("Reds", domain = c(10:70))
prompt <- c(paste0(police.data$name, ", ", police.data$age, ", ", police.data$race, ". ",
police.data$armed, ". ", police.data$date, ". ", police.data$city,
", ", police.data$state, ", ", police.data$zip))
selected.dataset = paste0('~pal_', input$dataset, '(', input$dataset, ')')
selected.pal = paste0('pal_', input$dataset)
selected.col = paste0('~', input$dataset)
map <- leaflet(data = police.data) %>% addTiles() %>%
addCircleMarkers(~longitude, ~latitude, popup = ~as.character(prompt),
radius = input$size,
color = eval(parse(text = selected.dataset)),
stroke = TRUE, fillOpacity = input$opacity) %>%
addLegend("bottomright", pal = eval(parse(text = selected.pal)),
values = eval(parse(text = selected.col)),
title = 'Legend', opacity = 1)
return (map)
})
getColor <- function(num) {
col <- "red"
if (num > 50) {
col <- "blue"
}
}
})
runApp('map')
library(shiny)
library(plotly)
library(leaflet)
setwd("~/OneDrive/Documents/School/INFO 201/Assignments/final_project")
police.data <- read.csv('data/police_final.csv')
shinyServer(function(input, output) {
# renders leaflet map
output$map <- renderPlotly({
#   1. Asian, 2. Black, 3. Hispanic, 4. Native, 5. Pacific, 6. Unknown, 7. White
colors1 <- c('brown', 'blue', 'red', 'green', 'yellow', 'purple', 'orange')
races <- c('White', 'Black', 'Asian', 'Hispanic', 'Native American',
'Unknown race', 'Pacific Islander')
#   1. Allegedly Armed, 2. Unarmed, 3. Unclear, 4. Vehicle
colors2 <- c('red', 'blue', 'purple', 'orange')
armed <- c('Allegedly Armed', 'Unclear', 'Vehicle', 'Unarmed')
#   1. Allegedly Armed, 2. Unarmed, 3. Unclear, 4. Vehicle
colors3 <- c('red', 'blue', 'purple', 'orange', 'brown', 'black', 'yellow', 'black')
age <- c('0 - 15', '15 - 30', '30 - 45', '45 - 60', '60 - 75',
'75 - 90', '90 - 105', 'Unknown')
pal_race <- colorFactor(colors1, domain = races)
pal_armed <- colorFactor(colors2, domain = armed)
pal_age <- colorFactor(colors3, domain = age)
prompt <- c(paste0(police.data$name, ", ", police.data$age, ", ", police.data$race, ". ",
police.data$armed, ". ", police.data$date, ". ", police.data$city,
", ", police.data$state, ", ", police.data$zip))
selected.dataset = paste0('~pal_', input$dataset, '(', input$dataset, ')')
selected.pal = paste0('pal_', input$dataset)
selected.col = paste0('~', input$dataset)
map <- leaflet(data = police.data) %>% addTiles() %>%
addCircleMarkers(~longitude, ~latitude, popup = ~as.character(prompt),
radius = input$size,
color = eval(parse(text = selected.dataset)),
stroke = TRUE, fillOpacity = input$opacity) %>%
addLegend("bottomright", pal = eval(parse(text = selected.pal)),
values = eval(parse(text = selected.col)),
title = 'Legend', opacity = 1)
return (map)
})
getColor <- function(num) {
col <- "red"
if (num > 50) {
col <- "blue"
}
}
})
runApp('map')
library(shiny)
library(plotly)
library(leaflet)
setwd("~/OneDrive/Documents/School/INFO 201/Assignments/final_project")
police.data <- read.csv('data/police_final.csv')
shinyServer(function(input, output) {
# renders leaflet map
output$map <- renderPlotly({
#   1. Asian, 2. Black, 3. Hispanic, 4. Native, 5. Pacific, 6. Unknown, 7. White
colors1 <- c('brown', 'blue', 'red', 'green', 'yellow', 'purple', 'orange')
races <- c('White', 'Black', 'Asian', 'Hispanic', 'Native American',
'Unknown race', 'Pacific Islander')
#   1. Allegedly Armed, 2. Unarmed, 3. Unclear, 4. Vehicle
colors2 <- c('red', 'blue', 'purple', 'orange')
armed <- c('Allegedly Armed', 'Unclear', 'Vehicle', 'Unarmed')
#   1. Allegedly Armed, 2. Unarmed, 3. Unclear, 4. Vehicle
colors3 <- c('red', 'blue', 'purple', 'orange', 'brown', 'black', 'yellow', 'black')
age <- c('0 - 15', '15 - 30', '30 - 45', '45 - 60', '60 - 75',
'75 - 90', '90 - 105', 'Unknown')
pal_race <- colorFactor(colors1, domain = races)
pal_armed <- colorFactor(colors2, domain = armed)
pal_age.group <- colorFactor(colors3, domain = age)
prompt <- c(paste0(police.data$name, ", ", police.data$age, ", ", police.data$race, ". ",
police.data$armed, ". ", police.data$date, ". ", police.data$city,
", ", police.data$state, ", ", police.data$zip))
selected.dataset = paste0('~pal_', input$dataset, '(', input$dataset, ')')
selected.pal = paste0('pal_', input$dataset)
selected.col = paste0('~', input$dataset)
map <- leaflet(data = police.data) %>% addTiles() %>%
addCircleMarkers(~longitude, ~latitude, popup = ~as.character(prompt),
radius = input$size,
color = eval(parse(text = selected.dataset)),
stroke = TRUE, fillOpacity = input$opacity) %>%
addLegend("bottomright", pal = eval(parse(text = selected.pal)),
values = eval(parse(text = selected.col)),
title = 'Legend', opacity = 1)
return (map)
})
getColor <- function(num) {
col <- "red"
if (num > 50) {
col <- "blue"
}
}
})
runApp('map')
runApp('map')
runApp('main')
getwd()
runApp('main')
source("~/Users/ishannarula/OneDrive/Documents/School/INFO 201/Assignments/final_project/map/map.r")
map
source("~/Users/ishannarula/OneDrive/Documents/School/INFO 201/Assignments/final_project/map/map.r")
map
source("~OneDrive/Documents/School/INFO 201/Assignments/final_project/map/map.r")
map
---
title: 'Assignment #7'
author: "Ishan Narula, Shaarika Kaul, Ada Arquiza, Andy Taing, and Lihn"
output: html_document
date: "November 15th, 2016"
---
```{r echo=FALSE, include=FALSE}
library(dplyr)
library(plotly)
library(knitr)
library(mclogit)
```
```{r, echo=FALSE, message=FALSE, warning=FALSE}
source("~/OneDrive/Documents/School/INFO 201/Assignments/a7-collaboration-teamuwannabe/script/summary.R")
freshman.percent <- freshman.summary[1]
freshman.interested.no <- freshman.summary[2]
freshman.interested.yes <- freshman.summary[3]
freshman.interested.maybe <- freshman.summary[4]
freshman.experience.none <- freshman.summary[5]
freshman.experience.experimented <- freshman.summary[6]
freshman.experience.moderate <- freshman.summary[7]
freshman.experience.lots <- freshman.summary[8]
```
##Summary Information File
Out of those taking INFO 201 who took the survey, `r freshman.percent` percent are freshman. Freshman data: `r freshman.experience.none` percent have never written code, `r freshman.experience.experimented` percent have experimented with programming, `r freshman.experience.moderate` percent have moderate experience, and `r freshman.experience.lots` percent have lots of experience. Out of these freshman, `r freshman.interested.no` percent are not planning on applying to the major, `r freshman.interested.yes` percent are planning on applying to the major, and `r freshman.interested.maybe` percent are not sure whether they want to apply.
##Class Standing Pie Chart
1) The following pie chart represents the students of our INFO 201 lecture class. The chart divides each student into their respective class standing which allows the user to see the diversity of grades in this specific lecture. Based off the data, the pie chart shows that most students enrolled in INFO 201 are of junior standing (30 students), which is significant data as this intro class tends to be popular with underclassman. The pie chart also shows that there is 1 student who isn't in a typical four year grade.
```{r, echo=FALSE, message=FALSE, warning=FALSE}
source("~/OneDrive/Documents/School/INFO 201/Assignments/a7-collaboration-teamuwannabe/script/piechart.R")
p
```
2) The following bar graph depecits the average number of countries visited per class standing in our INFO 201 class. The chart divides the classes between freshman, sophmores, juniors, seniors, and other. Based off the graph, one can see that the junior class has the lowest average of countires visited (5-6 countries) between all grades. Interestingly enough, the highest average is actually the "other" grade with an average of 7 countires visited. From the previous pie graph above, one can see that there's actually only one student who in the "other" category so that means that student has visited an average of more countries than all of the rest.
```{r, echo=FALSE, message=FALSE, warning=FALSE}
source("~/OneDrive/Documents/School/INFO 201/Assignments/a7-collaboration-teamuwannabe/script/chart2.R")
bar.chart
```
getwd()
setwd("~/OneDrive/Documents/School/INFO 201/Assignments/final_project/map")
source("~OneDrive/Documents/School/INFO 201/Assignments/final_project/map/map.r")
map
source("/Users/ishannarula/OneDrive/Documents/School/INFO\ 201/Assignments/final_project/map/map.r ")
map
source("/Users/ishannarula/OneDrive/Documents/School/INFO\ 201/Assignments/final_project/map/map.r")
map
source("/Users/ishannarula/OneDrive/Documents/School/INFO\ 201/Assignments/final_project/map/map.r")
map
setwd("~/OneDrive/Documents/School/INFO 201/Assignments/final_project")
library(shiny)
library(plotly)
library(leaflet)
setwd("~/OneDrive/Documents/School/INFO 201/Assignments/final_project")
shinyServer(function(input, output) {
# renders leaflet map
output$map <- renderLeaflet({
source("./map/map.r")
return (map)
})
})
setwd("~/OneDrive/Documents/School/INFO 201/Assignments/final_project")
source("./map/map.r")
map
source("~map.R")
map
source("~map.R")
map
library(shiny)
library(plotly)
library(leaflet)
setwd("~/OneDrive/Documents/School/INFO 201/Assignments/final_project")
police.data <- read.csv('data/police_final.csv')
#   1. Asian, 2. Black, 3. Hispanic, 4. Native, 5. Pacific, 6. Unknown, 7. White
colors1 <- c('brown', 'blue', 'red', 'green', 'yellow', 'purple', 'orange')
races <- c('White', 'Black', 'Asian', 'Hispanic', 'Native American',
'Unknown race', 'Pacific Islander')
#   1. Allegedly Armed, 2. Unarmed, 3. Unclear, 4. Vehicle
colors2 <- c('red', 'blue', 'purple', 'orange')
armed <- c('Allegedly Armed', 'Unclear', 'Vehicle', 'Unarmed')
#   1. 0 - 15,  2. 15 - 30, 3. 30 - 45, 4. 45 - 60, 5. 60 - 75, 6. 75 - 90, 7. 90 - 105
colors3 <- c('red', 'blue', 'purple', 'orange', 'brown', 'black', 'yellow', 'gray')
age <- c('0 - 15', '15 - 30', '30 - 45', '45 - 60', '60 - 75',
'75 - 90', '90 - 105', 'Unknown')
# created palletes by combining colors and domain
pal_race <- colorFactor(colors1, domain = races)
pal_armed <- colorFactor(colors2, domain = armed)
pal_age.group <- colorFactor(colors3, domain = age)
# creating dialog prompt
prompt <- c(paste0(police.data$name, ", ", police.data$age, ", ", police.data$race, ". ",
police.data$armed, ". ", police.data$date, ". ", police.data$city,
", ", police.data$state, ", ", police.data$zip))
# created various string input values
selected.dataset = paste0('~pal_', input$dataset, '(', input$dataset, ')')
selected.pal = paste0('pal_', input$dataset)
selected.col = paste0('~', input$dataset)
# building map
map <- leaflet(data = police.data) %>% addTiles() %>%
addCircleMarkers(~longitude, ~latitude, popup = ~as.character(prompt),
radius = input$size,
color = eval(parse(text = selected.dataset)),
stroke = TRUE, fillOpacity = input$opacity) %>%
addLegend("bottomright", pal = eval(parse(text = selected.pal)),
values = eval(parse(text = selected.col)),
title = 'Legend', opacity = 1)
map
library(shiny)
library(plotly)
library(leaflet)
setwd("~/OneDrive/Documents/School/INFO 201/Assignments/final_project")
police.data <- read.csv('data/police_final.csv')
#   1. Asian, 2. Black, 3. Hispanic, 4. Native, 5. Pacific, 6. Unknown, 7. White
colors1 <- c('brown', 'blue', 'red', 'green', 'yellow', 'purple', 'orange')
races <- c('White', 'Black', 'Asian', 'Hispanic', 'Native American',
'Unknown race', 'Pacific Islander')
#   1. Allegedly Armed, 2. Unarmed, 3. Unclear, 4. Vehicle
colors2 <- c('red', 'blue', 'purple', 'orange')
armed <- c('Allegedly Armed', 'Unclear', 'Vehicle', 'Unarmed')
#   1. 0 - 15,  2. 15 - 30, 3. 30 - 45, 4. 45 - 60, 5. 60 - 75, 6. 75 - 90, 7. 90 - 105
colors3 <- c('red', 'blue', 'purple', 'orange', 'brown', 'black', 'yellow', 'gray')
age <- c('0 - 15', '15 - 30', '30 - 45', '45 - 60', '60 - 75',
'75 - 90', '90 - 105', 'Unknown')
# created palletes by combining colors and domain
pal_race <- colorFactor(colors1, domain = races)
pal_armed <- colorFactor(colors2, domain = armed)
pal_age.group <- colorFactor(colors3, domain = age)
# creating dialog prompt
prompt <- c(paste0(police.data$name, ", ", police.data$age, ", ", police.data$race, ". ",
police.data$armed, ". ", police.data$date, ". ", police.data$city,
", ", police.data$state, ", ", police.data$zip))
# created various string input values
selected.dataset = paste0('~pal_', input$dataset, '(', input$dataset, ')')
selected.pal = paste0('pal_', input$dataset)
selected.col = paste0('~', input$dataset)
# building map
map <- leaflet(data = police.data) %>% addTiles() %>%
addCircleMarkers(~longitude, ~latitude, popup = ~as.character(prompt),
radius = input$size,
color = eval(parse(text = selected.dataset)),
stroke = TRUE, fillOpacity = input$opacity) %>%
addLegend("bottomright", pal = eval(parse(text = selected.pal)),
values = eval(parse(text = selected.col)),
title = 'Legend', opacity = 1)
library(shiny)
library(plotly)
library(leaflet)
setwd("~/OneDrive/Documents/School/INFO 201/Assignments/final_project")
police.data <- read.csv('data/police_final.csv')
shinyServer(function(input, output) {
# renders leaflet map
output$map <- renderPlotly({
#   1. Asian, 2. Black, 3. Hispanic, 4. Native, 5. Pacific, 6. Unknown, 7. White
colors1 <- c('brown', 'blue', 'red', 'green', 'yellow', 'purple', 'orange')
races <- c('White', 'Black', 'Asian', 'Hispanic', 'Native American',
'Unknown race', 'Pacific Islander')
#   1. Allegedly Armed, 2. Unarmed, 3. Unclear, 4. Vehicle
colors2 <- c('red', 'blue', 'purple', 'orange')
armed <- c('Allegedly Armed', 'Unclear', 'Vehicle', 'Unarmed')
#   1. 0 - 15,  2. 15 - 30, 3. 30 - 45, 4. 45 - 60, 5. 60 - 75, 6. 75 - 90, 7. 90 - 105
colors3 <- c('red', 'blue', 'purple', 'orange', 'brown', 'black', 'yellow', 'gray')
age <- c('0 - 15', '15 - 30', '30 - 45', '45 - 60', '60 - 75',
'75 - 90', '90 - 105', 'Unknown')
# created palletes by combining colors and domain
pal_race <- colorFactor(colors1, domain = races)
pal_armed <- colorFactor(colors2, domain = armed)
pal_age.group <- colorFactor(colors3, domain = age)
# creating dialog prompt
prompt <- c(paste0(police.data$name, ", ", police.data$age, ", ", police.data$race, ". ",
police.data$armed, ". ", police.data$date, ". ", police.data$city,
", ", police.data$state, ", ", police.data$zip))
# created various string input values
selected.dataset = paste0('~pal_', input$dataset, '(', input$dataset, ')')
selected.pal = paste0('pal_', input$dataset)
selected.col = paste0('~', input$dataset)
# building map
map <- leaflet(data = police.data) %>% addTiles() %>%
addCircleMarkers(~longitude, ~latitude, popup = ~as.character(prompt),
radius = input$size,
color = eval(parse(text = selected.dataset)),
stroke = TRUE, fillOpacity = input$opacity) %>%
addLegend("bottomright", pal = eval(parse(text = selected.pal)),
values = eval(parse(text = selected.col)),
title = 'Legend', opacity = 1)
return (map)
})
getColor <- function(num) {
col <- "red"
if (num > 50) {
col <- "blue"
}
}
})
map
output$map
library(shiny)
library(plotly)
library(leaflet)
source("~OneDrive/Documents/School/INFO 201/Assignments/final_project/map/server.r")
library(shiny)
library(plotly)
library(leaflet)
source("~OneDrive/Documents/School/INFO 201/Assignments/final_project/map/server.R")
library(shiny)
library(plotly)
library(leaflet)
source("/Users/ishannarula/server.r")
library(shiny)
library(plotly)
library(leaflet)
source("/Users/ishannarula/server.R")
map
library(shiny)
library(plotly)
library(leaflet)
source("/Users/ishannarula/OneDrive/Documents/School/INFO 201/Assignments/final_project/map/server.R")
library(shiny)
library(plotly)
library(leaflet)
source("/Users/ishannarula/OneDrive/Documents/School/INFO 201/Assignments/final_project/map/server.R")
View(police.data)
library(shiny)
library(plotly)
library(leaflet)
source("/Users/ishannarula/OneDrive/Documents/School/INFO 201/Assignments/final_project/map/server.R")
runApp('main')
library(shiny)
library(plotly)
shinyUI(navbarPage('Police Brutality 2013 - 2016',
# Create a tab panel for your map
tabPanel('Map',
source("/Users/ishannarula/OneDrive/Documents/School/INFO 201/Assignments/final_project/map/ui.R")
),
# Create a tab panel for your scatter
tabPanel('Scatter',
titlePanel('Scatter of Brutality Incidents'),
# Create sidebar layout
sidebarPanel(
),
mainPanel(
)
)
))
runApp('main')
runApp('main')
runApp('map')
runApp('main')
runApp('main')
runApp('main')
runApp('main')
runApp('main')
runApp('main')
runApp('main')
runApp('map')
runApp('main')
runApp('map')
runApp('main')
runApp('main')
runApp('main')
runApp('main')
runApp('main')
runApp('main')
runApp('main')
runApp('main')
runApp('main')
runApp('main')
runApp('map')
runApp('map')
runApp('map')
source('/Users/ishannarula/server.R')
source('/Users/ishannarula/server.R')
source('/Users/ishannarula/OneDrive/Documents/School/INFO\ 201/Assignments/final_project/map/server.R ')
source('/Users/ishannarula/OneDrive/Documents/School/INFO 201/Assignments/final_project/map/server.R ')
source('/Users/ishannarula/OneDrive/Documents/School/INFO 201/Assignments/final_project/map/server.R')
runApp('main')
runApp('main')
library(shiny)
library(plotly)
shinyUI(navbarPage('Police Brutality 2013 - 2016',
# Create a tab panel for your map
tabPanel('Map',
source('/Users/ishannarula/OneDrive/Documents/School/INFO 201/Assignments/final_project/map/ui.R')
),
# Create a tab panel for your scatter
tabPanel('Scatter',
)
))
runApp('main')
runApp('main')
library(shiny)
library(plotly)
library(leaflet)
source('/Users/ishannarula/OneDrive/Documents/School/INFO 201/Assignments/final_project/map/server.R')
runApp('main')
runApp('main')
runApp('map')
runApp('main')
runApp('main')
runApp('main')
runApp('main')
runApp('main')
runApp('main')
runApp('main')
runApp('main')
source('/Users/ishannarula/OneDrive/Documents/School/INFO 201/Assignments/final_project/map/server.R')
runApp('main')
runApp('main')
